---
const name = "ahmetdem";
---

<section>
  <p id="username">{name}@<span id="browser-info"></span> |</p>
  <input id="terminal-input" type="text" />
</section>

<style>
  section {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 20px;
    padding: 5px;
    border-radius: var(--border-radius);
    background-color: white;
    border: 1px solid black; /* Add this to visualize each section */
  }

  p {
    font-family: var(--monospace-font-family);
    font-size: 20px;
  }

  #username {
    color: rgb(0, 0, 0); /* Change this to any color you want */
  }

  #browser-info {
    font-size: 20px;
    font-weight: 500;
  }

  #terminal-input {
    background: none;
    border: none;
    font-family: var(--monospace-font-family);
    font-size: 20px;
    color: var(--text-color);
    width: 750px;
  }

  #terminal-input:focus {
    border: none;
    outline: none;
  }

  @media only screen and (max-width: 1200px) {
    section {
      flex-direction: column;
      align-items: flex-start;
    }
    #terminal-input {
      width: 300px;
    }
  }
</style>

<p id="browser-info"></p>

<script>
  const p = document.getElementById("browser-info");
  const userAgent = navigator.userAgent;
  let browser = "unknown";

  if (userAgent.indexOf("Chrome") !== -1) {
    browser = "chrome";
  } else if (userAgent.indexOf("Firefox") !== -1) {
    browser = "zen";
  }

  p.textContent = "ahmetdem";

  const input = document.getElementById("terminal-input");
  const examples = [
    "how to tie a tie?",
    "today's weather",
    "search on reddit with r:query",
    "search stackoverflow with s:query",
    "make the terminal great again",
    "hey sexy! wanna kill all humans?",
    "press ctrl+c to clear",
    "Bunu okuyan gaydÄ±r.",
  ];

  let exampleIndex = 0;
  let charIndex = 0;
  let typingSpeed = 50; // Speed of typing effect

  function typePlaceholder() {
    if (charIndex < examples[exampleIndex].length) {
      input.placeholder += examples[exampleIndex].charAt(charIndex);
      charIndex++;
      setTimeout(typePlaceholder, typingSpeed);
    } else {
      setTimeout(() => {
        input.placeholder = "";
        charIndex = 0;
        exampleIndex = (exampleIndex + 1) % examples.length;
        typePlaceholder();
      }, 2000);
    }
  }

  typePlaceholder();

  // Automatically focus the input when the page loads
  input.focus();

  // Focus the input when any key is pressed
  document.addEventListener("keydown", function () {
    input.focus();
  });

  let elements = document.querySelectorAll("a");

  // Add this CSS to your stylesheet or in a style tag
  const styleTag = document.createElement("style");
  styleTag.textContent = `
  .bookmark-match {
    opacity: 1 !important;
    filter: brightness(1.3) !important;
    transform: scale(1.05) !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.8) !important;
  }

  .bookmark-nomatch {
    opacity: 0.3 !important;
    filter: grayscale(80%) !important;
    transform: scale(0.95) !important;
    transition: all 0.3s ease !important;
  }

  .bookmark-nomatch-parent {
    text-decoration: line-through !important;
  }

  /* Ensure hover effects always take priority */
  ul li a:hover {
    background-color: var(--card-item-hover-background-color) !important;
    transform: scale(1.03) !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
    opacity: 1 !important;
    filter: none !important;
  }
`;
  document.head.appendChild(styleTag);

  // Function to reset all styles
  function resetStyles() {
    for (let element of elements) {
      element.classList.remove("bookmark-match");
      element.classList.remove("bookmark-nomatch");
      element.parentElement.classList.remove("bookmark-nomatch-parent");
    }
  }

  // Check input content and apply styles accordingly
  input.addEventListener("input", function () {
    let value = input.value.toLowerCase();

    // Reset all styles if input is empty
    if (value === "") {
      resetStyles();
      return;
    }

    // Process all link elements
    for (let element of elements) {
      let text = element.textContent.toLowerCase();
      let isMatch = text.includes(value.replace(/^r:|^s:|^m:/, ""));

      if (isMatch) {
        // Highlight matching items
        element.classList.add("bookmark-match");
        element.classList.remove("bookmark-nomatch");
        element.parentElement.classList.remove("bookmark-nomatch-parent");
      } else {
        // Fade non-matching items
        element.classList.remove("bookmark-match");
        element.classList.add("bookmark-nomatch");
        element.parentElement.classList.add("bookmark-nomatch-parent");
      }
    }
  });

  // Handle keyboard events
  input.addEventListener("keydown", function (event) {
    let value = input.value.toLowerCase();
    let matchFound = false;

    // Ctrl+C to clear and reset
    if (event.ctrlKey && event.key === "c") {
      input.value = "";
      resetStyles();
      return;
    }

    // Only process further if Enter is pressed
    if (event.key !== "Enter") return;

    // Find matching link
    for (let element of elements) {
      if (value === "") continue;

      if (
        element.textContent
          .toLowerCase()
          .indexOf(value.replace(/^r:|^s:|^m:/, "")) !== -1
      ) {
        window.location.href = element.href;
        matchFound = true;
        break;
      }
    }

    // Handle special commands and search
    if (!matchFound) {
      if (value === "help") {
        document.getElementById("help").style.display = "block";
        document.getElementById("overlay").classList.add("active");
      } else if (value.startsWith("r:")) {
        window.location.href =
          "https://google.com/search?q=site:reddit.com " +
          value.replace("r:", "");
      } else if (value.startsWith("s:")) {
        window.location.href =
          "https://google.com/search?q=site:stackoverflow.com " +
          value.replace("s:", "");
      } else if (value.startsWith("m:")) {
        window.location.href =
          "https://google.com/search?q=site:myanimelist.net " +
          value.replace("m:", "");
      } else if (value.startsWith("gay hakan")) {
        window.location.href = "https://myanimelist.net/profile/Asteria";
      } else {
        let words = value.split(".");
        if (words.length >= 2) {
          window.location.href = "http://" + value;
        } else {
          window.location.href = "https://google.com/search?q=" + value;
        }
      }
    }
  });

  // Make sure to reset styles when the input is cleared or focus is lost
  input.addEventListener("blur", function () {
    if (input.value === "") {
      resetStyles();
    }
  });

  // Additional handler for when the page loads
  document.addEventListener("DOMContentLoaded", function () {
    resetStyles();
  });

  input.addEventListener("input", function () {
    let value = input.value.toLowerCase();
    let elements = document.querySelectorAll("a");
    for (let i = 0; i < elements.length; i++) {
      let element = elements[i];
      if (value === "") {
        element.style.mixBlendMode = "";
      } else if (
        element.textContent
          .toLowerCase()
          .indexOf(value.replace(/^r:|^s:/, "")) !== -1
      ) {
        element.style.mixBlendMode = "";
      } else {
        element.style.mixBlendMode = "color-burn";
      }
    }
  });

  let commandHistory = [];
  let historyIndex = -1;

  input.addEventListener("keydown", function (event) {
    if (event.key === "ArrowUp") {
      if (historyIndex > 0) {
        historyIndex--;
        input.value = commandHistory[historyIndex];
      }
      event.preventDefault();
    } else if (event.key === "ArrowDown") {
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        input.value = commandHistory[historyIndex];
      } else {
        input.value = "";
        historyIndex = commandHistory.length;
        resetStyles();
      }
      event.preventDefault();
    } else if (event.key === "Enter") {
      let command = input.value.trim();
      if (command !== "") {
        commandHistory.push(command);
        historyIndex = commandHistory.length;
      }
    }
  });

  const table = document.getElementById("help");

  function exitTable() {
    table.style.display = "none";
    document.getElementById("overlay").classList.remove("active");
    const input = document.getElementById("terminal-input");
    input.value = "";
    input.focus(); // Re-focus the input after closing the help table

    const elements = document.querySelectorAll("a");
    for (let i = 0; i < elements.length; i++) {
      let element = elements[i];
      element.style.mixBlendMode = "";
    }
  }

  document.addEventListener("keydown", function (event) {
    if (event.keyCode === 27) {
      exitTable();
    }
  });

  const closeTableButton = document.getElementById("closeTable");

  closeTableButton.onclick = function () {
    exitTable();
  };
</script>
